Prefix(:=<urn:absolute:None#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology(<urn:absolute:None>

<urn:absolute:1.0>
Declaration(Class(<AdministrativeStaffWorker>))
Declaration(Class(<Dean>))
Declaration(Class(<Employee>))
Declaration(Class(<FacultyMember>))
Declaration(Class(<GraduateLevelCourse>))
Declaration(Class(<GraduateStudent>))
Declaration(Class(<Organization>))
Declaration(Class(<Person>))
Declaration(Class(<PostDoctorate>))
Declaration(Class(<Professor>))
Declaration(Class(<Publication>))
Declaration(Class(<ResearchAssistant>))
Declaration(Class(<ResearchGroup>))
Declaration(Class(<School>))
Declaration(Class(<Student>))
Declaration(Class(<TeachingCourse>))
Declaration(Class(<UndergraduateStudent>))
Declaration(Class(<University>))
Declaration(ObjectProperty(<attends>))
Declaration(ObjectProperty(<hasAlumnus>))
Declaration(ObjectProperty(<hasDegreeFrom>))
Declaration(ObjectProperty(<isHeadOf>))
Declaration(ObjectProperty(<isPartOf>))
Declaration(ObjectProperty(<publishes>))
Declaration(ObjectProperty(<teaches>))
Declaration(ObjectProperty(<worksFor>))
Declaration(ObjectProperty(<writtenBy>))
Declaration(DataProperty(<age>))
Declaration(DataProperty(<email>))
Declaration(DataProperty(<name>))
Declaration(DataProperty(<telephoneNumber>))
Declaration(DataProperty(<title>))
AnnotationAssertion(rdfs:label <attends> "attends"@it)
ObjectPropertyDomain(<attends> <Student>)
ObjectPropertyRange(<attends> <TeachingCourse>)
AnnotationAssertion(rdfs:label <hasAlumnus> "hasAlumnus"@it)
SubObjectPropertyOf(<hasAlumnus> ObjectInverseOf(<hasDegreeFrom>))
AnnotationAssertion(rdfs:label <hasDegreeFrom> "hasDegreeFrom"@it)
ObjectPropertyDomain(<hasDegreeFrom> <Person>)
ObjectPropertyRange(<hasDegreeFrom> <University>)
AnnotationAssertion(rdfs:label <isHeadOf> "isHeadOf"@it)
SubObjectPropertyOf(<isHeadOf> <worksFor>)
AnnotationAssertion(rdfs:label <isPartOf> "isPartOf"@it)
ObjectPropertyDomain(<isPartOf> <Organization>)
ObjectPropertyRange(<isPartOf> <Organization>)
AnnotationAssertion(rdfs:label <publishes> "publishes"@it)
ObjectPropertyDomain(<publishes> <Organization>)
ObjectPropertyRange(<publishes> <Publication>)
AnnotationAssertion(rdfs:label <teaches> "teaches"@it)
InverseFunctionalObjectProperty(<teaches>)
ObjectPropertyDomain(<teaches> <FacultyMember>)
ObjectPropertyRange(<teaches> <TeachingCourse>)
AnnotationAssertion(rdfs:label <worksFor> "worksFor"@it)
ObjectPropertyRange(<worksFor> <Organization>)
AnnotationAssertion(rdfs:label <writtenBy> "writtenBy"@it)
ObjectPropertyDomain(<writtenBy> <Publication>)
ObjectPropertyRange(<writtenBy> <Person>)
AnnotationAssertion(rdfs:label <age> "age"@it)
FunctionalDataProperty(<age>)
DataPropertyDomain(<age> <Person>)
DataPropertyRange(<age> xsd:int)
AnnotationAssertion(rdfs:label <email> "email"@it)
DataPropertyRange(<email> xsd:string)
AnnotationAssertion(rdfs:label <name> "name"@it)
FunctionalDataProperty(<name>)
DataPropertyDomain(<name> ObjectUnionOf(<Organization> <Person>))
DataPropertyRange(<name> xsd:string)
AnnotationAssertion(rdfs:label <telephoneNumber> "telephoneNumber"@it)
DataPropertyRange(<telephoneNumber> xsd:string)
AnnotationAssertion(rdfs:label <title> "title"@it)
FunctionalDataProperty(<title>)
DataPropertyDomain(<title> <Publication>)
DataPropertyRange(<title> xsd:string)
AnnotationAssertion(rdfs:label <AdministrativeStaffWorker> "AdministrativeStaffWorker"@it)
AnnotationAssertion(rdfs:label <Dean> "Dean"@it)
SubClassOf(<Dean> <Professor>)
SubClassOf(<Dean> ObjectSomeValuesFrom(<isHeadOf> <School>))
AnnotationAssertion(rdfs:label <Employee> "Employee"@it)
SubClassOf(<Employee> ObjectSomeValuesFrom(<worksFor> owl:Thing))
AnnotationAssertion(rdfs:label <FacultyMember> "FacultyMember"@it)
AnnotationAssertion(rdfs:label <GraduateLevelCourse> "GraduateLevelCourse"@it)
SubClassOf(<GraduateLevelCourse> <TeachingCourse>)
AnnotationAssertion(rdfs:label <GraduateStudent> "GraduateStudent"@it)
SubClassOf(<GraduateStudent> ObjectSomeValuesFrom(<attends> <GraduateLevelCourse>))
DisjointClasses(<GraduateStudent> <UndergraduateStudent>)
AnnotationAssertion(rdfs:label <Organization> "Organization"@it)
EquivalentClasses(<Organization> ObjectSomeValuesFrom(ObjectInverseOf(<worksFor>) owl:Thing))
DisjointClasses(<Organization> <Person>)
AnnotationAssertion(rdfs:label <Person> "Person"@it)
EquivalentClasses(<Person> DataSomeValuesFrom(<age> rdfs:Literal))
SubClassOf(<Person> DataSomeValuesFrom(<email> rdfs:Literal))
SubClassOf(<Person> DataSomeValuesFrom(<telephoneNumber> rdfs:Literal))
AnnotationAssertion(rdfs:label <PostDoctorate> "PostDoctorate"@it)
AnnotationAssertion(rdfs:label <Professor> "Professor"@it)
AnnotationAssertion(rdfs:label <Publication> "Publication"@it)
EquivalentClasses(<Publication> DataSomeValuesFrom(<title> rdfs:Literal))
AnnotationAssertion(rdfs:label <ResearchAssistant> "ResearchAssistant"@it)
SubClassOf(<ResearchAssistant> ObjectAllValuesFrom(<worksFor> owl:Thing))
AnnotationAssertion(rdfs:label <ResearchGroup> "ResearchGroup"@it)
AnnotationAssertion(rdfs:label <School> "School"@it)
AnnotationAssertion(rdfs:label <Student> "Student"@it)
EquivalentClasses(<Student> ObjectUnionOf(<GraduateStudent> <UndergraduateStudent>))
AnnotationAssertion(rdfs:label <TeachingCourse> "TeachingCourse"@it)
EquivalentClasses(<TeachingCourse> ObjectSomeValuesFrom(ObjectInverseOf(<teaches>) owl:Thing))
AnnotationAssertion(rdfs:label <UndergraduateStudent> "UndergraduateStudent"@it)
AnnotationAssertion(rdfs:label <University> "University"@it)
EquivalentClasses(ObjectUnionOf(<Organization> <Person>) DataSomeValuesFrom(<name> rdfs:Literal))
SubClassOf(ObjectUnionOf(<AdministrativeStaffWorker> <FacultyMember> <ResearchAssistant>) <Employee>)
SubClassOf(ObjectUnionOf(<Employee> <Student>) <Person>)
SubClassOf(ObjectUnionOf(<PostDoctorate> <Professor>) <FacultyMember>)
SubClassOf(ObjectUnionOf(<ResearchGroup> <School> <University>) <Organization>)
DisjointClasses(<AdministrativeStaffWorker> <FacultyMember> <ResearchAssistant>)
DisjointClasses(<ResearchGroup> <School> <University>)
)