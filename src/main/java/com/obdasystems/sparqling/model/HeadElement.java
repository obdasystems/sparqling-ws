/*
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * OpenAPI spec version: 1.0.2
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.obdasystems.sparqling.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.obdasystems.sparqling.model.Filter;
import com.obdasystems.sparqling.model.Function;
import com.obdasystems.sparqling.model.GroupByElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * HeadElement
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2023-01-04T12:09:21.062Z[GMT]")public class HeadElement   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("graphElementId")
  private String graphElementId = null;

  @JsonProperty("var")
  private String var = null;

  @JsonProperty("alias")
  private String alias = null;

  @JsonProperty("ordering")
  private Integer ordering = null;

  @JsonProperty("function")
  private Function function = null;

  @JsonProperty("groupBy")
  private GroupByElement groupBy = null;

  @JsonProperty("having")
  private List<Filter> having = null;

  public HeadElement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   **/
  @JsonProperty("id")
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public HeadElement graphElementId(String graphElementId) {
    this.graphElementId = graphElementId;
    return this;
  }

  /**
   * Get graphElementId
   * @return graphElementId
   **/
  @JsonProperty("graphElementId")
  @Schema(description = "")
  public String getGraphElementId() {
    return graphElementId;
  }

  public void setGraphElementId(String graphElementId) {
    this.graphElementId = graphElementId;
  }

  public HeadElement var(String var) {
    this.var = var;
    return this;
  }

  /**
   * Get var
   * @return var
   **/
  @JsonProperty("var")
  @Schema(description = "")
  public String getVar() {
    return var;
  }

  public void setVar(String var) {
    this.var = var;
  }

  public HeadElement alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   **/
  @JsonProperty("alias")
  @Schema(description = "")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public HeadElement ordering(Integer ordering) {
    this.ordering = ordering;
    return this;
  }

  /**
   * 1 is ascending -1 descending 0 not defined
   * @return ordering
   **/
  @JsonProperty("ordering")
  @Schema(description = "1 is ascending -1 descending 0 not defined")
  public Integer getOrdering() {
    return ordering;
  }

  public void setOrdering(Integer ordering) {
    this.ordering = ordering;
  }

  public HeadElement function(Function function) {
    this.function = function;
    return this;
  }

  /**
   * Get function
   * @return function
   **/
  @JsonProperty("function")
  @Schema(description = "")
  @Valid
  public Function getFunction() {
    return function;
  }

  public void setFunction(Function function) {
    this.function = function;
  }

  public HeadElement groupBy(GroupByElement groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  /**
   * Get groupBy
   * @return groupBy
   **/
  @JsonProperty("groupBy")
  @Schema(description = "")
  @Valid
  public GroupByElement getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(GroupByElement groupBy) {
    this.groupBy = groupBy;
  }

  public HeadElement having(List<Filter> having) {
    this.having = having;
    return this;
  }

  public HeadElement addHavingItem(Filter havingItem) {
    if (this.having == null) {
      this.having = new ArrayList<Filter>();
    }
    this.having.add(havingItem);
    return this;
  }

  /**
   * Get having
   * @return having
   **/
  @JsonProperty("having")
  @Schema(description = "")
  @Valid
  public List<Filter> getHaving() {
    return having;
  }

  public void setHaving(List<Filter> having) {
    this.having = having;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeadElement headElement = (HeadElement) o;
    return Objects.equals(this.id, headElement.id) &&
        Objects.equals(this.graphElementId, headElement.graphElementId) &&
        Objects.equals(this.var, headElement.var) &&
        Objects.equals(this.alias, headElement.alias) &&
        Objects.equals(this.ordering, headElement.ordering) &&
        Objects.equals(this.function, headElement.function) &&
        Objects.equals(this.groupBy, headElement.groupBy) &&
        Objects.equals(this.having, headElement.having);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, graphElementId, var, alias, ordering, function, groupBy, having);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeadElement {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    graphElementId: ").append(toIndentedString(graphElementId)).append("\n");
    sb.append("    var: ").append(toIndentedString(var)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    ordering: ").append(toIndentedString(ordering)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    having: ").append(toIndentedString(having)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
