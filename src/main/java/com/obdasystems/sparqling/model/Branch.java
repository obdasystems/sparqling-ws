/*
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.obdasystems.sparqling.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Branch
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2022-01-14T08:18:44.959Z[GMT]")public class Branch  implements Serializable  {
  @JsonProperty("objectPropertyIRI")
  private String objectPropertyIRI = null;

  @JsonProperty("cyclic")
  private Boolean cyclic = null;

  @JsonProperty("direct")
  private Boolean direct = null;

  @JsonProperty("relatedClasses")
  private List<String> relatedClasses = null;

  public Branch objectPropertyIRI(String objectPropertyIRI) {
    this.objectPropertyIRI = objectPropertyIRI;
    return this;
  }

  /**
   * Get objectPropertyIRI
   * @return objectPropertyIRI
   **/
  @JsonProperty("objectPropertyIRI")
  @Schema(description = "")
  public String getObjectPropertyIRI() {
    return objectPropertyIRI;
  }

  public void setObjectPropertyIRI(String objectPropertyIRI) {
    this.objectPropertyIRI = objectPropertyIRI;
  }

  public Branch cyclic(Boolean cyclic) {
    this.cyclic = cyclic;
    return this;
  }

  /**
   * It is true when domain and range are the same class.
   * @return cyclic
   **/
  @JsonProperty("cyclic")
  @Schema(description = "It is true when domain and range are the same class.")
  public Boolean isCyclic() {
    return cyclic;
  }

  public void setCyclic(Boolean cyclic) {
    this.cyclic = cyclic;
  }

  public Branch direct(Boolean direct) {
    this.direct = direct;
    return this;
  }

  /**
   * Get direct
   * @return direct
   **/
  @JsonProperty("direct")
  @Schema(description = "")
  public Boolean isDirect() {
    return direct;
  }

  public void setDirect(Boolean direct) {
    this.direct = direct;
  }

  public Branch relatedClasses(List<String> relatedClasses) {
    this.relatedClasses = relatedClasses;
    return this;
  }

  public Branch addRelatedClassesItem(String relatedClassesItem) {
    if (this.relatedClasses == null) {
      this.relatedClasses = new ArrayList<String>();
    }
    this.relatedClasses.add(relatedClassesItem);
    return this;
  }

  /**
   * Get relatedClasses
   * @return relatedClasses
   **/
  @JsonProperty("relatedClasses")
  @Schema(description = "")
  public List<String> getRelatedClasses() {
    return relatedClasses;
  }

  public void setRelatedClasses(List<String> relatedClasses) {
    this.relatedClasses = relatedClasses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Branch branch = (Branch) o;
    return Objects.equals(this.objectPropertyIRI, branch.objectPropertyIRI) &&
        Objects.equals(this.cyclic, branch.cyclic) &&
        Objects.equals(this.direct, branch.direct) &&
        Objects.equals(this.relatedClasses, branch.relatedClasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectPropertyIRI, cyclic, direct, relatedClasses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Branch {\n");
    
    sb.append("    objectPropertyIRI: ").append(toIndentedString(objectPropertyIRI)).append("\n");
    sb.append("    cyclic: ").append(toIndentedString(cyclic)).append("\n");
    sb.append("    direct: ").append(toIndentedString(direct)).append("\n");
    sb.append("    relatedClasses: ").append(toIndentedString(relatedClasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
